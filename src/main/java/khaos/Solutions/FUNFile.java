package khaos.Solutions;

/**
 * @author Fernando Moreno Jabato <fmjabato@yahoo.es>
 */

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Scanner;
import java.util.Vector;

import khaos.IllegalFileFormatException;
import khaos.InformationNotFoundException;

/**
 * This class load the information saved on files FUN.txt generated by JMetal algorithms.
 * 
 * To use it you've to create the instance specifying a file or using setFile() and, after, 
 * use load() method to load all the info.
 */
public class FUNFile {
	//FIELDS
	private String[] objectiveNames;
	private Vector<double[]> results;
	private File file;
	private int numberObjectives;
	
	//CONSTRUCTORS
	/**
	 * Instantiate an object of FUNFile class without specify the file to use.
	 */
	public FUNFile(){
		this(null);
	}
	
	
	/**
	 * Instantiate an object of FUNFile class without specifying the file to be used for load the information.
	 */
	public FUNFile(File fun){
		file = fun;
		results = new Vector<double[]>();
		objectiveNames = null;
		numberObjectives = -1;
	}
	
	
	//METHODS
	/**
	 * This method check the format of the file given to load the information is correct.
	 * @return true if the format is right and false in the other case.
	 */
	public boolean checkFormat(){
		try{
			FileReader fr = new FileReader(file);
			Scanner sc = new Scanner(fr);
			
			//Take first line
			String[] splited = sc.nextLine().split(" ");
			
			int numSolutionsAux = splited.length; //Auxiliar number of genes
			
			//All lines should have the same number of solutions
			while(sc.hasNext()){
				splited = sc.nextLine().split(" ");
				if(splited.length != numSolutionsAux){
					sc.close();
					return false;
				}
			}
			
			sc.close();
		}catch(FileNotFoundException fnfe){
			fnfe.printStackTrace();
			return false;
		}catch(Exception e){
			e.printStackTrace();
			return false;
		}
		
		//Everything's OK
		return true;
	}
	
	
	/**
	 * @return the file used to load the information.
	 * @throws NullPointerException
	 */
	public File getFile() throws NullPointerException{
		if(file == null)
			throw new NullPointerException("File is not given yet");
		return file;
	}
	
	
	/**
	 * @return the number of objectives used to find solutions. 
	 * @throws InformationNotFoundException
	 */
	public int getNumberObjetives() throws InformationNotFoundException {
		if(numberObjectives < 1)
			throw new InformationNotFoundException("Information not loaded yet");
		return numberObjectives;
	}
	
	
	/**
	 * @return the number of different results saved on this file.
	 * @throws InformationNotFoundException
	 */
	public int getNumberResults() throws InformationNotFoundException {
		if(results.isEmpty())
			throw new InformationNotFoundException("Information not loaded yet");
		return results.size();
	}
	
	
	/**
	 * @return the objective's names if it has been specified.
	 * @throws InformationNotFoundException
	 */
	public String[] getObjetiveNames() throws InformationNotFoundException {
		if(objectiveNames == null)
			throw new InformationNotFoundException("Information not given");
		return objectiveNames;
	}
	
	
	/**
	 * @param index of the result wanted.
	 * @return the solution wanted.
	 * @throws InformationNotFoundException
	 */
	public double[] getResult(int index) throws InformationNotFoundException {
		if(results.isEmpty())
			throw new InformationNotFoundException("Information not loaded yet");
		return results.get(index);
	}
	
	
	/**
	 * @return a vector with all solutions generated.
	 * @throws InformationNotFoundException
	 */
	public Vector<double[]> getResults() throws InformationNotFoundException {
		if(results.isEmpty())
			throw new InformationNotFoundException("Information not loaded yet");
		return results;
	}
	
	
	/**
	 * This method is used to load the information saved on the file specified.
	 * @return true if the process finished. Instead of return false throws exceptions that specify the reasons because the information couldn't be loaded.
	 * @throws NullPointerException
	 * @throws IllegalFileFormatException
	 */
	public boolean load() throws NullPointerException, IllegalFileFormatException {
		if(file == null)
			throw new NullPointerException("File pointer is null");
		
		if(!checkFormat())
			throw new IllegalFileFormatException("Illegal format of file" + file.getName());
		
		try{
			FileReader fr = new FileReader(file);
			Scanner sc = new Scanner(fr);
			
			//First line
			String[] splited = sc.nextLine().split(" ");
			numberObjectives = splited.length;
			
			double[] result = new double[numberObjectives];
			
			for(int i=0; i<numberObjectives; ++i)
				result[i] = Double.valueOf(splited[i]);
			results.add(result);
			result = new double[numberObjectives];
			
			while(sc.hasNext()){
				splited = sc.nextLine().split(" ");
				for(int i=0; i<numberObjectives; ++i)
					result[i] = Double.valueOf(splited[i]);
				results.add(result);
				result = new double[numberObjectives];
			}
			
			sc.close();
		}catch(FileNotFoundException fnfe){
			fnfe.printStackTrace();
			return false;
		}
		
		return true;
	}
	
	
	/**
	 * @param name of objective that want to be saved.
	 * @param index index of the name that will be changed.
	 * @throws IndexOutOfBoundsException
	 */
	public void setObjetiveName(String name,int index) throws IndexOutOfBoundsException{
		objectiveNames[index] = name;
	}
	
	
	/**
	 * @param names array that will be used as objective's names register.
	 */
	public void setObjetiveNames(String[] names){
		objectiveNames = names;
	}
	
	
	/**
	 * @return an array with a description of this object.
	 */
	public String toString(){
		String s = "FILE NOT GIVEN YET";
		String extra = "";
		try{
			s = "File: " + file.getName() + "\n";
			
			extra = "FILE NOT LOADED YET";
			
			try{
				String s2 = "Number of objetives: "+ this.getNumberObjetives()+" || Number of results obtained: " + this.getNumberResults();
				extra = s2;
				try{
					s2 += "\n" + "Objetive's names: ";
					String[] names = this.getObjetiveNames();
					s2 += names[0];
					for(int i=1; i< names.length;++i)
						s2 += ", " + names[i];
					extra = s2+".";
				}catch(Exception e){}
			}catch(Exception e){}
		}catch(Exception e){}	
			
		return s + extra;
	}
	
	
	
	
	
	
	public static void main(String[] args){
		String path = "C:\\Users\\fmjab_000\\Desktop\\KhaosWorkspace\\jmetalmaven\\FUN.txt";
		FUNFile fun = new FUNFile(new File(path));
		fun.load();
		String[] names = new String[2];
		names[0] = "fitness";
		names[1] = "avarage";
		fun.setObjetiveNames(names);
		System.out.println(fun.toString());
	}
	
}//END CLASS
